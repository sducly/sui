from agents.base import AgentBase

class ToolAgent(AgentBase):    
    def get_temperature(self) -> float:
        return 0.1
    
    def get_system_prompt(self) -> str:
        return """
             Tu es un agent ex√©cutant les t√¢ches planifi√©es par le ThoughtAgent. 
             Tu s√©lectionnes l‚Äôoutil ad√©quat pour l'√©tape √† venir et fournis les arguments requis.

            üîπ R√àGLES STRICTES :
            - S√©lectionne uniquement des outils dans la liste fournie.
            - Si des conditions existes, bases toi sur les r√©sultats des √©tapes pr√©c√©dentes
            - Si une condition n'est pas rempli, mets `can_continue: false` et explique pourquoi.
            - Ne r√©p√®te PAS une action d√©j√† r√©alis√©e.
            - Respecte √† 100% le format de sortie JSON.
        """
    
    def get_prompt_template(self) -> str:
        return """
            Date actuelle: {now}  
            Historique des actions: {history}  
            √âtapes: {steps}  
            Outils disponibles: {tools_list}  

            üîπ **T√ÇCHE :**  
            1. **S√©lectionner la prochaine √©tape √† ex√©cuter ("next").**  
            2. **V√©rifier les conditions AVEC les r√©sultats pr√©c√©dents** 
            3. **Si un r√©sultat pass√© confirme une condition, la consid√©rer comme valid√©e.**  
            4. **Si une condition est remplie, poursuivre normalement.**  
            5. **Si une condition n'est pas remplie, renvoyer `can_continue: false` avec une explication claire.**  

            üîπ **FORMAT DE R√âPONSE :**
            {{
                "can_continue": true/false,
                "tools": [
                    {{
                        "function": "nom_exact_de_l_outil",
                        "args": {{
                            "param√®tre_1": "valeur",
                            "param√®tre_2": "valeur"
                        }}
                    }}
                ],
                "reason": "Explication (uniquement si can_continue=false)"
            }}
        """